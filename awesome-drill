#!/bin/bash

command -v tput > /dev/null

tput clear
cat  << 'EOF'
     ___   ____    __    ____  _______     _______.  ______   .___  ___.  _______ 
    /   \  \   \  /  \  /   / |   ____|   /       | /  __  \  |   \/   | |   ____|
   /  ^  \  \   \/    \/   /  |  |__     |   (----`|  |  |  | |  \  /  | |  |__   
  /  /_\  \  \            /   |   __|     \   \    |  |  |  | |  |\/|  | |   __|  
 /  _____  \  \    /\    /    |  |____.----)   |   |  `--'  | |  |  |  | |  |____ 
/__/     \__\  \__/  \__/     |_______|_______/     \______/  |__|  |__| |_______|
                                                                                  
 _______  .______       __   __       __        __  
|       \ |   _  \     |  | |  |     |  |      |  | 
|  .--.  ||  |_)  |    |  | |  |     |  |      |  | 
|  |  |  ||      /     |  | |  |     |  |      |  | 
|  '--'  ||  |\  \----.|  | |  `----.|  `----. |__| 
|_______/ | _| `._____||__| |_______||_______| (__) 
                                                   
EOF

OS_NAME="$(uname | awk '{print tolower($0)}')"

terraform_dd() {
	if [ "${OS_NAME}" == "linux" ]; then
		command -v zip > /dev/null
		if [ $? -eq 1 ]; then
			sudo apt-get -y install zip
		fi

		command -v terraform
		if [ $? -eq 1 ]; then
			curl -X GET https://www.terraform.io/downloads.html 2>/dev/null | grep "\.\zip" | grep "terraform" > tf_list
			if [ ${FZF} == "true" ]; then
				while read -r line; do
					echo ${line} | awk -F'"' '{print $2}' | awk -F'"' '{print $1}'
				done < tf_list | uniq  > list
				SELECTED=$(cat list | fzf --reverse --no-mouse --height=15 --bind=left:page-up,right:page-down)
				if [ ! ${SELECTED}  ]; then
					return
				else
					ZIP_NAME=$(echo $SELECTED | awk -F'/' '{print $NF}')
					echo $ZIP_NAME
					wget $SELECTED
					unzip $ZIP_NAME
					chmod +x terraform
					mv terraform /usr/local/bin
					rm -rf tf_list
					rm -rf list
					rm -rf $ZIP_NAME
				fi
			fi
		fi
	elif [ "${OS_NAME}" == "darwin" ]; then
		command -v zip > /dev/null
		if [ $? -eq 1 ]; then
			brew install zip
		fi

		command -v terraform
		if [ $? -eq 1 ]; then
			brew install terraform
		fi
	fi
    
}

go_dd() {
	command -v go
	if [ $? -eq 1 ]; then
		exp="go([[:alnum:]\.]*)\.src.*"

		curl -X GET https://golang.org/dl/ 2>/dev/null > log

		if [ "${FZF}" == "true" ]; then
			while read -r line; do
				if [[ "${line}" =~ ${exp} ]]; then
					echo "${BASH_REMATCH[1]}"
				fi
			done < log | sort --version-sort --reverse | uniq > list
			SELECTED=$(cat list | fzf --reverse --no-mouse --height=15 --bind=left:page-up,right:page-down)
		fi

		GO_URL=$(cat log | grep "go${SELECTED}" | grep linux-amd64 | sed -n 1p | awk -F' ' '{print $4}' | awk -F'"' '{print $2}')
		GO_BINARY=$(echo $GO_URL | awk -F'/' '{print $5}')
		wget ${GO_URL}
		tar -C /usr/local -xvf ${GO_BINARY}
		rm -rf ${GO_BINARY}

		FIND_GO=$(cat ~/.bashrc | grep "go/bin" | wc -l)
		if [ ${FIND_GO} -eq 0 ]; then
	    	echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc
		fi
		FIND_GOPATH=$(cat ~/.bashrc | grep "GOPATH" | wc -l)
		if [ ${FIND_GOPATH} -eq 0 ]; then
			echo 'export GOPATH=$(go env GOPATH)' >> ~/.bashrc
		fi
		FIND_GOROOT=$(cat ~/.bashrc | grep "GOROOT" | wc -l)
		if [ ${FIND_GOROOT} -eq 0 ]; then
    		echo 'export GOROOT=/usr/local/go' >> ~/.bashrc
		fi
		rm -rf list
		rm -rf log
	else
		go get -v golang.org/x/tools/cmd/godoc
	fi
}

aws-cli_dd () {
	if [ "${OS_NAME}" == "linux" ]; then
		command -v pip3 > /dev/null
		if [ $? -eq 1 ]; then
			sudo apt -y install jq
			sudo apt -y install python3
			sudo apt -y install python3-distutils
			curl -O https://bootstrap.pypa.io/get-pip.py 2>/dev/null 
			python3 get-pip.py --user
			echo "PATH=~/.local/bin:$PATH" >> ~/.bashrc
			export PATH=~/.local/bin:$PATH
			pip3 --version
			pip3 install awscli --upgrade --user
		else
			command -v aws > /dev/null
			if [ $? -eq 1 ]; then
				pip3 --version
				pip3 install awscli --upgrade --user
			fi
		fi
		rm -rf get-pip.py
	elif [ "${OS_NAME}" == "darwin" ]; then
		brew install awscli
	fi
	
}

aws-iam-authenticator_dd () {
	if [ "${OS_NAME}" == "linux" ]; then
		command -v aws-iam-authenticator > /dev/null
		if [ $? -eq 1 ]; then
			curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/aws-iam-authenticator 2>/dev/null
			chmod +x ./aws-iam-authenticator
			mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
		fi
	elif [ "${OS_NAME}" == "darwin" ]; then
		brew install aws-iam-authenticator
	fi
	
}

nodejs_dd() {
	command -v node > /dev/null
	if [ $? -eq 1 ]; then
		apt-get -y install nodejs
		apt-get -y install npm
	fi
}

java8_dd() {
	if [ "${OS_NAME}" == "linux" ]; then
		command -v java > /dev/null
		if [ $? -eq 1 ]; then
			apt-get -y install software-properties-common
			add-apt-repository ppa:webupd8team/java
			apt-get -y install openjdk-8-jdk openjdk-8-jre
			export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre >> /etc/profile
		fi
		echo 'export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/jre' >> /etc/profile
	elif [ "${OS_NAME}" == "darwin" ]; then
		command -v java > /dev/null
		if [ $? -eq 1 ]; then
			echo "java not installed"
		fi
	fi
}

maven_dd() {
	command -v mvn > /dev/null
	if [ $? -eq 1 ]; then
		curl -X GET http://maven.apache.org/download.cgi 2>/dev/null | grep apache-maven | grep maven/maven-3 | grep -v sha | grep -v asc | grep bin | awk -F '"' '{print $2}' 2>/dev/null > maven_list
		SELECTED_MAVEN_URL=$(cat maven_list | fzf --reverse --no-mouse --height=15 --bind=left:page-up,right:page-down)
		SELECTED_MAVEN=$(echo $SELECTED_MAVEN_URL | awk -F'/' '{print $NF}')
		wget $SELECTED_MAVEN_URL
		rm -rf maven_list

		mv $SELECTED_MAVEN /usr/local/
		pushd /usr/local/
		tar -xvf $SELECTED_MAVEN
		popd
		echo 'export M2_HOME=/usr/local/apache-maven-3.6.3' >> /etc/profile
		echo 'export PATH=$PATH:$M2_HOME/bin' >> /etc/profile
	fi
}

gradle_dd() {
	command -v gradle > /dev/null
	if [ $? -eq 1 ]; then
		curl -s "https://get.sdkman.io" | bash
		source "$HOME/.sdkman/bin/sdkman-init.sh"
		sdk install gradle 5.2.1
	fi
}

aws-vault_dd() {
	if [ "${OS_NAME}" == "darwin" ]; then
		command -v aws-vault > /dev/null
		if [ $? -eq 1 ]; then
			brew cask install aws-vault
		fi
	else
		echo "Not MacOS"
	fi
}

ansible_dd() {
	if [ "${OS_NAME}" == "darwin" ]; then
		command -v pip > /dev/null
		if [ $? -eq 1 ]; then
			sudo easy_install pip
			command -v ansible > /dev/null
			if [ $? -eq 1 ]; then
				pip install --user ansible
			fi
		else
			sudo pip install ansible
		fi
		sudo curl -L https://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg -o /etc/ansible/ansible.cfg
	else
		echo "Not MacOS, other OS is not supported\nSoon it will support"
	fi
}



# install fzf
command -v fzf > /dev/null
if [ $? -eq 1 ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install
    exit 0
else
    FZF=true
fi

# intro
echo -e "| ============================================================= |"
echo -e "| Install all your application in linux for using drill-down!!! |"
echo -e "| ============================================================= |"

# main
while :
do
	CMD_SELECTED=$(cat ~/.ad/resources/cmd | fzf --reverse --no-mouse --height=15 --bind=left:page-up,right:page-down)
	if [ "${CMD_SELECTED}" == "" ]; then
		break
	else
		echo "${CMD_SELECTED}"
		${CMD_SELECTED}_dd
	fi
done
